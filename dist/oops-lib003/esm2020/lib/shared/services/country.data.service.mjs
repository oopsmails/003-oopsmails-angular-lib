import { Injectable } from '@angular/core';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { debounceTime, delay, switchMap, tap } from 'rxjs/operators';
import { COUNTRIES } from '../data/countries.data';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
function compare(v1, v2) {
    return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;
}
function sort(countries, column, direction) {
    if (direction === '') {
        return countries;
    }
    else {
        return [...countries].sort((a, b) => {
            const res = compare(a[column], b[column]);
            return direction === 'asc' ? res : -res;
        });
    }
}
function matches(CountryLib003, term, pipe) {
    return (CountryLib003.name.toLowerCase().includes(term) ||
        pipe.transform(CountryLib003.area).includes(term) ||
        pipe.transform(CountryLib003.population).includes(term));
}
export class CountryDataServiceLib003 {
    constructor(pipe) {
        this.pipe = pipe;
        this.COMPONENT_NAME = 'CountryLib003DataService';
        this._loading$ = new BehaviorSubject(true);
        this._search$ = new Subject();
        this._countries$ = new BehaviorSubject([]);
        this._total$ = new BehaviorSubject(0);
        this._state = {
            page: 1,
            pageSize: 4,
            searchTerm: '',
            sortColumn: '',
            sortDirection: '',
        };
        this._search$
            .pipe(tap(() => this._loading$.next(true)), debounceTime(200), switchMap(() => this._search()), delay(200), tap(() => this._loading$.next(false)))
            .subscribe((result) => {
            this._countries$.next(result.countries);
            this._total$.next(result.total);
        });
        this._search$.next();
    }
    get countries$() {
        console.log(this.COMPONENT_NAME + ', calling get countries$ ..... ');
        return this._countries$.asObservable();
    }
    get total$() {
        return this._total$.asObservable();
    }
    get loading$() {
        return this._loading$.asObservable();
    }
    get page() {
        return this._state.page;
    }
    get pageSize() {
        return this._state.pageSize;
    }
    get searchTerm() {
        return this._state.searchTerm;
    }
    set page(page) {
        this._set({ page });
    }
    set pageSize(pageSize) {
        this._set({ pageSize });
    }
    set searchTerm(searchTerm) {
        this._set({ searchTerm });
    }
    set sortColumn(sortColumn) {
        this._set({ sortColumn });
    }
    set sortDirection(sortDirection) {
        this._set({ sortDirection });
    }
    _set(patch) {
        Object.assign(this._state, patch);
        this._search$.next();
    }
    _search() {
        const { sortColumn, sortDirection, pageSize, page, searchTerm } = this._state;
        // 1. sort
        let countries = sort(COUNTRIES, sortColumn, sortDirection);
        // 2. filter
        countries = countries.filter((CountryLib003) => matches(CountryLib003, searchTerm, this.pipe));
        const total = countries.length;
        // 3. paginate
        countries = countries.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);
        return of({ countries, total });
    }
}
CountryDataServiceLib003.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CountryDataServiceLib003, deps: [{ token: i1.DecimalPipe }], target: i0.ɵɵFactoryTarget.Injectable });
CountryDataServiceLib003.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CountryDataServiceLib003, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CountryDataServiceLib003, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.DecimalPipe }]; } });
//# sourceMappingURL=data:application/json;base64,